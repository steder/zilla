* TODO [2/10] Zilla Jukebox
  Provide a management and operation interface for a jukebox
** TODO [3/4] User Accounts
*** DONE Create Account
*** DONE Login
*** DONE Logout
** TODO [4/5] User Stories:
*** DONE 1. As a listener, I should be able to select an album from a
            collection of albums and from that album I should be able to
            select a particular song.
*** TODO 2. As a listener, I should be able to search for artists, albums
            and songs present in the jukebox.
*** DONE 3. As a listener, I should be able to see what is the most commonly
            played song, album or artist.
*** DONE 4. As the jukebox owner, I should be able to add or remove an album
            in the jukebox.
*** DONE 5. As the jukebox owner, I should be able to block certain individual
            songs from being played.
**** TODO As part of this I need to enforce the playability rule both in Django
          and in the underlying twisted service.
** TODO [1/1] UI Stuff
*** DONE User Account Links:  Login, Logout, Profile, Admin
*** NICE Profile Page lists total plays by this user?
** TODO [1/1] Admin Permissions
*** DONE Normal users are neither staff nor super.   They just have a profile.
** DONE Schema:

Also assume the following relationships:

A Jukebox
  - has many Albums
An Album
  - has many Songs
  - belongs to a one Artist
An Artist
  - has many Albums

A Song
  - title
  - artist
  - album
  - genre
  - played
  - playable
  - audio?  how to represent audio?  store a blob?  store a uri/fs path?  

** NICE figure out how to store and play audio to complete jukebox
** TODO Assume there are only two kinds of users:
 - Listeners (who may be anonymous)
 - Owners (who are named, and are also Listeners).

   Django Admin Interface and normal User Interface
** TODO PostgreSQL Backend (SQLite for testing and basic install for evaluation?)
** NICE Migration Tool (Goose?  SqlAlchemyMigrate?  South?)
   South seems like the winner here although we may not really need
   to skin this cat just yet as the sqlite testing interface
   is making it really painless to prototype and change the
   schema.  And because I'm testing first I really don't need
   a to worry about manually sync'ing dbs.
** Alternative Storage (MongoDB) ?  Storing song files?  Faster?  Better
   scaling story then PostgreSQL?  Granted PG 9.0 is getting more replication,
   hot backups, performance improvements etc.  PG and Mongo both have sync and
   async drivers so both Twisted and Django can coexist in harmony.
** DONE [2/2] Twisted
*** NICE Handling long running processes like iTunes library uploads
    that should occur outside of the Django Request Response Cycle. 
    (Arguably, could use CeleryD here as well)
*** NICE Handling streaming file downloads 
*** DONE perhaps serving static content
*** DONE WSGI container for Django?  Pretty painless way to deploy django
    without apache configs and multiple services to setup and manage
    and it can do double duty by streaming and / or serving static
    files.

** TODO Deployment Testing 
   - setup.py should work
   - app should run on postgres or sqlite3
** TODO documentation for setup
** NICE documentation for code?
